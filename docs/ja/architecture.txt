# 概要

**Fluentd** は<a href="/plugin/">125種類以上のシステム</a>で瞬時に '**Log Everything**' アーキテクチャを提供する完全に自由で完全にオープンソースのログ収集システムです。Fluentdはログを(コンピュータにとって可読性の高いフォーマットとして人気の)JSONとして扱います。また、C言語とRubyによる薄いラッパーで書かれており柔軟性があります。

Fluentdの性能は実際に立証されています。もっとも大規模なユーザーは **5000台以上のサーバー** から一日あたり5TB以上、ピークタイムには秒間50,000メッセージにものぼるログを収集しています。

## 目的

現代のWebおよびモバイルアプリケーションはとても大量の **イベントログ** を生み出します(例: ログイン, ログアウト, 決済, フォローなど)。イベントログを分析することで、これらのサービスは大きく向上できます。しかし、ログをいかにシンプルかつ信頼性高くそしてスケーラブルな方法で収集するかという課題が残されています。

Fluentdは、以下の機能を備えた **シンプルなソリューション** を提供することでこの課題を適切に解決します。

* 簡単なインストール
* 小さなフットプリント
* 半構造データによるロギング
* 柔軟なプラグイン機構
* 信頼できるバッファリング
* ログ転送

## 簡単なインストール

**Fluentd** はRubyインタプリタを内蔵した[rpm](install-by-rpm)または[deb](install-by-deb)パッケージとして入手できます。これらのパッケージでインストールする場合、お使いのシステムには実際のところ依存しません。

また、Fluentdを[Ruby gem](install-by-gem)として入手し、たった１回のコマンドでインストールすることもできます。

## 小さなフットプリント

アーキテクチャがシンプルなため、Fluentdのコア部分はたった3,000行のRubyコードで構成されています。Fluentdはさまざまな **入力** ソースからイベントを収集し、それらを **出力** シンクに書き込みます。

* 入力の例： HTTP, Syslog, Apache Log
* 出力の例： ファイル, メール, RDBMSのデータベース, NoSQLストレージ

以下の図は、 **入力** と **出力** の基本的な考え方を示しています。

    :::text
        Input                          Output
    +--------------------------------------------+
    |                                            |
    |  Web Apps  ---+                 +--> File  |
    |               |                 |          |
    |               +-->           ---+          |
    |  /var/log  ------>  Fluentd  ------> Mail  |
    |               +-->           ---+          |
    |               |                 |          |
    |  Apache    ---+                 +--> S3    |
    |                                            |
    +--------------------------------------------+

## 半構造データによるロギング

収集されたイベントログは *タグ*, *日時*, *レコード* の３つのコンポーネントで構成されます。タグは '.' で区切られた文字列（例： myapp.access）で、イベントを分類するために使われます。日時はイベントが発生したUNIX時間です。レコードはイベント情報を含んだJSONオブジェクトです。

## 柔軟なプラグイン機構

Fluentdの入力ソースと出力先は適切なRubyプラグインを書くことで拡張できます。プラグインはRuby gemsで公開することができます。入手可能なプラグインの一覧は次のコマンドでみることができます。

    :::term
    $ gem search -rd fluent-plugin

## 信頼できるバッファリング

古風なシステムでは、出力時に予期せぬ障害（例： ネットワーク障害）が発生した場合にイベントログが失われることを許容していました。Fluentdはこの課題と戦うために設計されており、信頼できるバッファリングという戦略を備えています。Fluentdのバッファは、イベントログを含んだチャンクのqueueとなっており、収集されたイベントを一時的に格納します。

    Queue
    +---------+
    |         |
    |  Chunk <-- Write events to the top chunk
    |         |  (never block)
    |  Chunk  |
    |         |
    |  Chunk  |
    |         |
    |  Chunk --> Write out the bottom chunk
    |         |  (transactional)
    +---------+

Fluentdが入力ソースからイベントを受け取ると、イベントログがバッファ内の一番上のチャンクに追加されます。一時的に格納するためのこの操作は、たとえ送信先のサーバーがダウンしても妨げられることがありません。

新しい空のチャンクは、（１）一番上のチャンクのサイズが限界に達する、もしくは（２）時間切れになった場合にqueueの一番上に作られます。

別のスレッドが一番下のチャンクを送信先のサーバーまたはストレージサーバーに書き出します。この書き込みが成功した場合、チャンクはqueueから削除されます。書き込みが成功しなかった場合、スレッドはチャンクをqueueに残し再試行します。

Fluentdのバッファ実装はプラガブルです。デフォルトのプラグインは’Memory’で、チャンクをメモリに格納します。これは高速ですが永続的ではありません。他に’File’があり、これはチャンクをファイルに格納します。

## ログ転送

Fluentdはシングルノード構成とマルチノード構成の両方をサポートします。マルチノード構成は一般的に、ログ分析の中心となる場所までイベントログを転送するために使われます。アプリケーションサーバー上のFluentdノードはローカルログを中央サーバーのFluentdノードまで転送します。

    Web Server
    +---------+
    | Fluentd -------+
    +---------+      |
                     |
    Proxy Server     |
    +---------+      +--> +---------+
    | Fluentd ----------> | Fluentd |
    +---------+      +--> +---------+
                     |
    Database Server  |
    +---------+      |
    | Fluentd -------+
    +---------+
