# Writing plugins

## Installing custom plugins

To install a plugin, please put the ruby script in the ``/etc/fluent/plugin`` directory.

Alternatively, you can create a Ruby Gem package that includes a ``lib/fluent/plugin/<TYPE>_<NAME>.rb`` file. The *TYPE* is ``in`` for input plugins, ``out`` for output plugins, and ``buf`` for buffer plugins. For example, an eMail Output plugin would have the path: ``lib/fluent/plugin/out_mail.rb``. The packaged gem can be distributed and installed using RubyGems. For further information, please see the [list of Fluentd plugins](http://fluentd.org/plugin/).

## Writing Input Plugins

Extend the **Fluent::Input** class and implement the following methods.

    :::ruby
    class SomeInput < Fluent::Input
      # First, register the plugin. NAME is the name of this plugin
      # and identifies the plugin in the configuration file.
      Fluent::Plugin.register_input('NAME', self)

      # This method is called before starting.
      # 'conf' is a Hash that includes configuration parameters.
      # If the configuration is invalid, raise Fluent::ConfigError.
      def configure(conf)
        super
        @port = conf['port']
        ...
      end

      # This method is called when starting.
      # Open sockets or files and create a thread here.
      def start
        super
        ...
      end

      # This method is called when shutting down.
      # Shutdown the thread and close sockets or files here.
      def shutdown
        ...
      end
    end

To submit events, use the ``Fluent::Engine.emit(tag, time, record)`` method, where ``tag`` is the String, ``time`` is the UNIX time integer and ``record`` is a Hash object.

    :::ruby
    tag = "myapp.access"
    time = Time.now.to_i
    record = {"message"=>"body"}
    Fluent::Engine.emit(tag, time, record)

The RDoc of the Engine class can be found in the [Fluentd RDoc](http://fluentd.org/rdoc/Fluent/EngineClass.html).

## Writing Buffered Output Plugins

Extend the **Fluent::BufferedOutput** class and implement the following methods.

    :::ruby
    class SomeOutput < Fluent::BufferedOutput
      # First, register the plugin. NAME is the name of this plugin
      # and identifies the plugin in the configuration file.
      Fluent::Plugin.register_output('NAME', self)

      # This method is called before starting.
      # 'conf' is a Hash that includes configuration parameters.
      # If the configuration is invalid, raise Fluent::ConfigError.
      def configure(conf)
        super
        @path = conf['path']
        ...
      end

      # This method is called when starting.
      # Open sockets or files here.
      def start
        super
        ...
      end

      # This method is called when shutting down.
      # Shutdown the thread and close sockets or files here.
      def shutdown
        super
        ...
      end

      # This method is called when an event reaches to Fluentd.
      # Convert the event to a raw string.
      def format(tag, time, record)
        [tag, time, record].to_json + "\n"
        ## Alternatively, use msgpack to serialize the object.
        # [tag, time, record].to_msgpack
      end

      ## Intead of the above method, you could instead implement this method,
      ## which is called by fluentd to process a collection of events.
      #def format_stream(tag, es)
      #  es.each {|time, record|
      #    [tag, time, record].to_json + "\n"
      #    # Alternatively, use msgpack to serialize the object. 
      #    # [tag, time, record].to_msgpack
      #  }
      #end

      # This method is called every flush interval. Write the buffer chunk
      # to files or databases here.
      # 'chunk' is a buffer chunk that includes multiple formatted
      # events. You can use 'data = chunk.read' to get all events and
      # 'chunk.open {|io| ... }' to get IO objects.
      def write(chunk)
        data = chunk.read
        print data
      end

      ## optionally, you can use chunk.msgpack_each to deserialize objects.
      #def write(chunk)
      #  chunk.msgpack_each {|(tag,time,record)|
      #  }
      #end
    end


## Writing Time Sliced Output Plugins

Time Sliced Output plugins are extended versions of buffered output plugins. One example of a time sliced output is the ``out_file`` plugin.

Note that Time Sliced Output plugins use file buffer by default. Thus the ``buffer_path`` option is required.

To implement a Time Sliced Output plugin, extend the **Fluent::TimeSlicedOutput** class and implement the following methods.

    :::ruby
    class SomeOutput < Fluent::TimeSlicedOutput
      # configure(conf), start(), shutdown() and format(tag, time, record) are
      # the same as BufferedOutput.
      ...

      # You can use 'chunk.key' to get sliced time. The format of 'chunk.key'
      # can be configured by the 'time_format' option. The default format is %Y%m%d.
      def write(chunk)
        day = chunk.key
        ...
      end
    end


## Writing Non-buffered Output Plugins

Extend the **Fluent::Output** class and implement the following methods.

    :::ruby
    class SomeOutput < Fluent::Output
      # First, register the plugin. NAME is the name of this plugin
      # and identifies the plugin in the configuration file.
      Fluent::Plugin.register_output('NAME', self)

      # This method is called before starting.
      def configure(conf)
        super
        ...
      end
    
      # This method is called when starting.
      def start
        super
        ...
      end
    
      # This method is called when shutting down.
      def shutdown
        super
        ...
      end
    
      # This method is called when an event reaches Fluentd.
      # 'es' is a Fluent::EventStream object that includes multiple events.
      # You can use 'es.each {|time,record| ... }' to retrieve events.
      # 'chain' is an object that manages transactions. Call 'chain.next' at
      # appropriate points and rollback if it raises an exception.
      def emit(tag, es, chain)
        chain.next
        es.each {|time,record|
          $stderr.puts "OK!"
        }
      end
    end

## Customizing the Tail Input Plugin Parser

You can customize the text parser for the Tail Input plugin by extending the **Fluent::TailInput** class.

Put the following file into **/etc/fluent/plugin/in_mytail.rb**.

    :::ruby
    class MyTailInput < Fluent::TailInput
      Fluent::Plugin.register_input('mytail', self)
    
      # Override the 'configure_parser(conf)' method.
      # You can get config parameters in this method.
      def configure_parser(conf)
        @time_format = conf['time_format'] || '%Y-%M-%d %H:%M:%S'
      end
    
      # Override the 'parse_line(line)' method that returns the time and record.
      # This example method assumes the following log format:
      #   %Y-%m-%d %H:%M:%S\tkey1\tvalue1\tkey2\tvalue2...
      #   %Y-%m-%d %H:%M:%S\tkey1\tvalue1\tkey2\tvalue2...
      #   ...
      def parse_line(line)
        elements = line.split("\t")
        
        time = elements.shift
        time = Time.strptime(time, @time_format).to_i
        
        # [k1, v1, k2, v2, ...] -> {k1=>v1, k2=>v2, ...}
        record = {}
        while (k = elements.shift) && (v = elements.shift)
          record[k] = v
        end
        
        return time, record
      end
    end

Use the following configuration file::

    :::text
    <source>
      type mytail
      path /path/to/myformat_file
      tag myapp.mytail
    </source>

## Debugging plugins

Run ``fluentd`` with the ``-vv`` option to show debug messages::

    :::term
    $ fluentd -vv

The **stdout** and **copy** output plugins are useful for debugging. The **stdout** output plugin dumps matched events to the console. It can be used as shown below::

    :::text
    # You want to debug this plugin.
    <source>
      type your_custom_input_plugin
    </source>
    
    # Dump all events to stdout.
    <match **>
      type stdout
    </match>

The **copy** output plugin copies matched events to multiple output plugins. You can use it in conjunction with the stdout plugin::

    :::text
    <source>
      type tcp
    </source>

    # Use the tcp Input plugin and the fluent-cat command to feed events:
    #  $ echo '{"event":"message"}' | fluent-cat test.tag
    <match test.tag>
      type copy

      # Dump the matched events.
      <store>
        type stdout
      </store>

      # Feed the dumped events to your plugin.
      <store>
        type your_custom_output_plugin
      </store>
    </match>

## Writing test cases

Fluentd provides unit test frameworks for plugins:

    :::text
    Fluent::Test::InputTestDriver
      Test driver for input plugins.
    
    Fluent::Test::BufferedOutputTestDriver
      Test driver for buffered output plugins.
    
    Fluent::Test::OutputTestDriver
      Test driver for non-buffered output plugins.

Please see Fluentd's source code for details.

## Further Reading

* [Slides: Dive into Fluentd Plugin](http://www.slideshare.net/repeatedly/fluentd-meetup-dive-into-fluent-plugin)
