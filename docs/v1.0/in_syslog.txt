# syslog Input Plugin

The `in_syslog` Input plugin enables Fluentd to retrieve records via the syslog protocol on UDP or TCP.

## Example Configuration

`in_syslog` is included in Fluentd's core. No additional installation process is required.

    :::text
    <source>
      @type syslog
      port 5140
      bind 0.0.0.0
      tag system
    </source>

This tells Fluentd to create a socket listening on port 5140. You need to set up your syslog daemon to send messages to the socket. For example, if you're using rsyslogd, add the following lines to `/etc/rsyslog.conf`.

    :::text
    # Send log messages to Fluentd
    *.* @127.0.0.1:5140

### Example Usage

The retrieved data is organized as follows. Fluentd's tag is generated by the `tag` parameter (tag prefix), [facility level](http://en.wikipedia.org/wiki/Syslog#Facility_Levels), and [priority](http://en.wikipedia.org/wiki/Syslog#Severity_levels). The record is parsed by the regexp [here](https://github.com/fluent/fluentd/blob/master/lib/fluent/plugin/parser_syslog.rb#L23).

    :::text
    tag = "#{@tag}.#{facility}.#{priority}"
    time = 1353436518,
    record = {
      "host": "host",
      "ident": "ident",
      "pid": "12345",
      "message": "text"
    }

If you want to keep facility and priority in the record, set related parameters.

## Plugin helpers

* [parser](api-plugin-helper-parser)
* [compat_parameters](api-plugin-helper-compat_parameters)
* [server](api-plugin-helper-server)

## Parameters

[Common Parameters](plugin-common-parameters)

### @type (required)
The value must be `syslog`.

### tag (required)
The prefix of the tag. The tag itself is generated by the tag prefix, [facility level](http://en.wikipedia.org/wiki/Syslog#Facility_Levels), and [priority](http://en.wikipedia.org/wiki/Syslog#Severity_levels).

### port

| type | default | version |
|:----:|:-------:|:-------:|
| integer | 5140 | 0.14.0  |

The port to listen to.

### bind

| type | default | version |
|:----:|:-------:|:-------:|
| string | 0.0.0.0 (all addresses) | 0.14.0 |

The bind address to listen to.

### protocol_type

| type | default | available values |version |
|:----:|:-------:|:----------------:|:-------:|
| enum | udp | udp/tcp | 0.14.0 |

The transport protocol used to receive logs. "udp" and "tcp" are supported.

### message_length_limit

| type | default | version |
|:----:|:-------:|:-------:|
| size | 2048 | 0.14.2 |

The max bytes of syslog message. If you send larger message, change this parameter.

### format
Deprecated parameter. Use `<parse>` instead.

### &lt;parse&gt; directive
The format of the log. This option is used to parse non-standard syslog formats using [parser plugins](parser-plugin-overview).

    :::text
    <source>
      @type syslog
      tag system
      <parse>
        @type FORMAT_PARAMETER
      </parse>
    </source>

Your `<parse>` regexp should not consider the 'priority' prefix of the log.
For example, if in_syslog receives the log below:

     <1>Feb 20 00:00:00 192.168.0.1 fluentd[11111]: [error] hogehoge

then the format parser receives the following log:

     Feb 20 00:00:00 192.168.0.1 fluentd[11111]: [error] hogehoge

If the `<parse>/@type` parameter is missing, then the log data is assumed to have the canonical syslog format.

### message_format

| type | default | available values |version |
|:----:|:-------:|:----------------::-------:|
| enum | rfc3164 | rfc3164/rfc5424/auto | 0.14.14 |

This parameter is used inside `<parse>` directive. The default is `rfc3164`

    :::text
    <source>
      @type syslog
      tag system
      <parse>
        message_format rfc5424
      </parse>
    </source>

Specify protocol format. Supported values are `rfc3164`, `rfc5424` and `auto`. If your syslog uses `rfc5424`, use `rfc5424` instead.<br />
Here is an example of message:

    :::text
    # rfc3164
    <6>Feb 28 12:00:00 192.168.0.1 fluentd[11111]: [error] Hello!
    # rfc5424
    <16>1 2017-02-28T12:00:00.009Z 192.168.0.1 fluentd - - - Hello!

`auto` is useful when `in_syslog` receives both `rfc3164` and `rfc5424` message per source. `in_syslog` detects message format by using message prefix and parse it.

### with_priority

| type | default | version |
|:----:|:-------:|:-------:|
| bool | true | 0.14.0  |

This parameter is used inside `<parse>` directive.

    :::text
    <source>
      @type syslog
      tag system
      <parse>
        with_priority false
      </parse>
    </source>

If `with_priority` is true, then syslog messages are assumed to be prefixed with a priority tag like "&lt;3&gt;". This option exists since some syslog daemons output logs without the priority tag preceding the message body.

NOTE: If you wish to parse syslog messages of arbitrary formats, <a href="in_tcp">in_tcp</a> or <a href="in_udp">in_udp</a> are recommended.

### source_hostname_key

| type | default | version |
|:----:|:-------:|:-------:|
| string | nil (no assign) | 0.14.0  |

The field name of the client's hostname. If set the value, the client's hostname will be set to its key.

### source_address_key

| type | default | version |
|:----:|:-------:|:-------:|
| string | nil (no assign) | 0.14.0  |

The field name of the client's address. If set the value, the client's address will be set to its key.

### priority_key

| type | default | version |
|:----:|:-------:|:-------:|
| string | nil (no assign) | 0.14.10 |

The field name of the priority. If set the value, the priority will be set to its key.

### facility_key

| type | default | version |
|:----:|:-------:|:-------:|
| string | nil (no assign) | 0.14.10 |

The field name of the facility. If set the value, the facility will be set to its key.

INCLUDE: _log_level_params

## TCP protocol and message delimiter

This plugin assumes `\n` for delimiter character between syslog messages in one TCP connection. If you use syslog library in your application with `protocol_type tcp`, add `\n` to your syslog message.<br />
See also [rfc6587](https://tools.ietf.org/html/rfc6587#section-3.4.2).

## Tips

### Multi-process environment

If you use this plugin under multi-process environment, port will be shared.

    :::term
    <system>
      workers 3
    </system>

    <source>
      @type syslog
      port 5140
    </source>

With this configuration, 3 workers share 5140 port. No need additional port. Incoming data will be routed to 3 workers automatically.

## Learn More

* [Input Plugin Overview](input-plugin-overview)

