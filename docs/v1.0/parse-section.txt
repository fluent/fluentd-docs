# Parse section configurations

Some of Fluentd's plugins support the ``<parse>`` section to specify how to parse raw data.

## Parse section overview

Parse section can be in ``<source>``, ``<match>`` or ``<filter>`` sections. It's enabled for plugins which support parser plugin features.

    <source>
      @type tail
      # parameters for input plugin
      <parse>
        # parse section parameters
      </parse>
    </source>

## parser plugin type

``<parse>`` section requires ``@type`` parameter to specify the type of parser plugin.
Fluentd core bundles [a lot of useful parser plugins](parser-plugin-overview). 3rd party plugins are also available when installed.

    <parse>
      @type apache2
    </parse>

For more details, see plugins documentation.

## Parameters

### @type

``@type`` key is to specify the type of parser plugin.

    <parse>
      @type regexp
      # ...
    </parse>

These parsers are built-in by default.

* [regexp](parser_regexp)
* [apache2](parser_apache2)
* [apache_error](parser_apache_error)
* [nginx](parser_nginx)
* [syslog](parser_syslog)
* [csv](parser_csv)
* [tsv](parser_tsv)
* [ltsv](parser_ltsv)
* [json](parser_json)
* [multiline](parser_multiline)
* [none](parser_none)

### Parse parameters

These parameters default value will be overwritten by individual parser plugins.

* **types** (hash) (optional): Specify types for converting field into other type. See below "The detail of types parameter" section.
  * Default: `nil`
  * string-based hash: `field1:type, field2:type, field3:type:option, field4:type:option`
  * JSON format:  `{"field1":"type", "field2":"type", "field3":"type:option", "field4":"type:option"}`
  * example: `types user_id:integer,paid:bool,paid_usd_amount:float`
* **time_key** (string) (optional): Specify time field for event time. If the event doesn't have this field, current time is used.
  * Default: `nil`
* **null_value_pattern** (string) (optional): Specify null value pattern.
  * Default: `nil`
* **null_empty_string** (bool) (optional): If `true`, empty string field is replaced with `nil`.
  * Default: `false`
* **estimate_current_event** (bool) (optional): If `true`, use `Fluent::EventTime.now`(current time) as a timestamp when `time_key` is specified.
  * Default: `false`
* **keep_time_key** (bool) (optional): If `true`, keep time field in the record.
  * Default: `false`

#### The detail of types parameter

The list of supported types are shown below:

* string

Convert field into String type. This uses `to_s` method for conversion.

* bool

Convert `"true"`, `"yes"` or `"1"` string into `true`. Otherwise, `false`.

* integer ("int" would NOT work!)

Convert field into Integer type. This uses `to_i` method for conversion. For example, `"1000"` string is converted into `1000`.

* float

Convert field into Float type. This uses `to_f` method for conversion. For example, `"7.45"` string is converted into `7.45`.

* time

Convert field into Fluent::EventTime type. This uses Fluentd's time parser for conversion. For time type, the third field specifies a time format you would in `time_format`.

    :::text
    date:time:%d/%b/%Y:%H:%M:%S %z # for string with time format
    date:time:unixtime             # for integer time
    date:time:float                # for float time

See `time_type` and `time_format` parameters in `Time parameters` section.

* array

Convert string field into Array type. For the "array" type, the third field specifies the delimiter (the default is ","). For example, if a field called "item_ids" contains the value `"3,4,5"`, `types item_ids:array` parses it as `["3", "4", "5"]`. Alternatively, if the value is `"Adam|Alice|Bob"`, `types item_ids:array:|` parses it as `["Adam", "Alice", "Bob"]`.


INCLUDE: _time_parameters

