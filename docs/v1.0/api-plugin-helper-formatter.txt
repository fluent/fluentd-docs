# Formatter Plugin Helper API

`formatter` helper manages formatter plugin life cycle.

Here is the code example with `formatter` helper:

    :::ruby
    require 'fluent/plugin/output'

    module Fluent::Plugin
      class ExampleOutput < Output
        Fluent::Plugin.register_output('example', self)

        # 1. load formatter helper
        helpers :formatter

        # omit shutdown and other plugin API

        def configure(conf)
          super

          # 2. call `formatter_create` to create object
          @formatter = formatter_create(usage: "awesome_formatter")
        end

        def format(tag, time, record)
          # 3. call `format` method to format record
          @formatter.format(tag, time, record)
        end
      end
    end

For more details about formatter plugin, see following articles:

- [Formatter Plugin Overview](formatter-plugin-overview)
- [Writing Formatter Plugins](api-plugin-formatter)
- [Format section](format-section)

## Methods

### formatter\_create(usage: "", type: nil, conf: nil, default_type: nil)

- `usage`: unique name. This is required when multiple formatters are used in the plugin
- `type`: formatter type
- `conf`: formatter plugin configuration
- `default_type`: default formatter type

Code examples:

    :::ruby
    def configure(conf)
      super
      # Create formatter plugin instance using <format> section in fluent.conf during configure phase
      @formatter = formatter_create
    end

    def format(tag, time, record)
      @formatter.format(tag, time, record)
    end


JSON formatter example:

    :::ruby
    # Create JSON formatter
    def configure(conf)
      super
      @json_formatter = formatter_create(usage: 'formatter_in_example_json', type: 'json')
    end

    def format(tag, time, record)
      @json_formatter.format(tag, time, record)
    end

Msgpack formatter example:

    :::ruby
    # Create Msgpack formatter
    def configure(conf)
      super
      @msgpack_formatter = formatter_create(usage: 'formatter_in_example_msgpack', type: 'msgpack')
    end

    def format(tag, time, record)
      @msgpack_formatter.format(tag, time, record)
    end

## formatter used plugins

- [Filter stdout](filter_stdout)
- [Out stdout](out_stdout)
- [Out exec](out_exec)
- [Out exec filter](out_exec_filter)
- [Out file](out_file)
- [Out s3](out_s3)
