# Formatter Overview

Fluentd has 7 types of plugins: [Input](input-plugin-overview), [Parser](parser-plugin-overview), [Filter](filter-plugin-overview), [Output](output-plugin-overview), [Formatter](formatter-plugin-overview), [Storage](storage-plugin-overview) and [Buffer](buffer-plugin-overview). This article gives an overview of Formatter Plugin.

## Overview

Sometimes, the output format for an output plugin does not meet one's needs. Fluentd has a pluggable system called Formatter that lets the user extend and re-use custom output formats.

## How To Use

For an output plugin that supports Formatter, the `<format>` directive can be used to change the output format.

For example, by default, [out_file](out_file) plugin outputs data as

    :::text
    2014-08-25 00:00:00 +0000<TAB>foo.bar<TAB>{"k1":"v1", "k2":"v2"}

However, if you set `@type json` in `<format>` like this

    :::text
    <match foo.bar>
      @type file
      path /path/to/file
      <format>
        @type json
      </format>
    </match>

The output changes to

    :::text
    {"time": "2014-08-25 00:00:00 +0000", "tag":"foo.bar", "k1:"v1", "k2":"v2"}

i.e., each line is a single JSON object with "time" and "tag fields to retain the event's timestamp and tag.

See [this section](plugin-development#text-formatter-plugins) to learn how to develop a custom formatter.

## List of Built-in Formatters

* [out_file](formatter_out_file)
* [json](formatter_json)
* [ltsv](formatter_ltsv)
* [csv](formatter_csv)
* [msgpack](formatter_msgpack)
* [hash](formatter_hash)
* [single_value](formatter_single_value)

## List of Output/Filter Plugins with Formatter Support

* [filter_stdout](filter_stdout)
* [out_file](out_file)
* [out_s3](out_s3)
